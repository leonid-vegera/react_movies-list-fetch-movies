{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","target","rel","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","query","setQuery","setMovie","isError","setError","getMovie","url","fetch","then","response","ok","status","json","result","Response","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","classNames","value","onChange","event","onClick","App","data","setMovies","some","item","ReactDOM","render","document","getElementById"],"mappings":"+wEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,EAASK,OAAO,SAASC,IAAI,uBAAtC,aC/BKC,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKP,UAAU,UACZO,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,gBCF3BG,G,MAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,MAAnC,mBAAOL,EAAP,KAAcQ,EAAd,KACA,EAA4BH,oBAAS,GAArC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,WCXI,IAACC,KDYZN,ECXHO,MAAM,GAAD,OAHG,8CAGH,OAAeD,IACxBE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,KAAK,IAAL,OAAUD,EAASE,OAAnB,KAGF,OAAOF,EAASG,WDMfJ,MAAK,SAACK,GACmB,UAApBA,EAAOC,SAMXZ,EAAS,CACPrB,MAAOgC,EAAOE,MACdjC,YAAa+B,EAAOG,KACpBjC,OAAQ8B,EAAOI,OACfrB,OAAQiB,EAAOK,OACflC,QAAQ,8BAAD,OAAgC6B,EAAOK,UAV9Cd,GAAS,OAoBjB,OACE,oCACE,0BAAMnB,UAAU,cACd,yBAAKA,UAAU,SACb,2BAAOA,UAAU,QAAQkC,QAAQ,eAAjC,eAIA,yBAAKlC,UAAU,WACb,2BACEmC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZrC,UACEsC,IAAW,QAAS,CAAE,YAAapB,IAErCqB,MAAOxB,EACPyB,SAAU,SAACC,GACTzB,EAASyB,EAAMrC,OAAOmC,OACtBpB,GAAS,OAKdD,GACC,uBAAGlB,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEmC,KAAK,SACLnC,UAAU,kBACV0C,QAAS,kBAAMtB,MAHjB,iBASF,yBAAKpB,UAAU,WACb,4BACEmC,KAAK,SACLnC,UAAU,oBACV0C,QAAS,WACP7B,EAASJ,GAnDrBQ,EAAS,MACTD,EAAS,MA8CD,sBAcLP,GACC,yBAAKT,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcS,O,OE5FZkC,EAAM,WACjB,MAA4B7B,mBAAS8B,GAArC,mBAAOrC,EAAP,KAAesC,EAAf,KAcA,OACE,yBAAK7C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYO,OAAQA,KAEtB,yBAAKP,UAAU,WACb,kBAAC,EAAD,CAAWa,SAlBA,SAACJ,GACXA,IAIDF,EAAOuC,MAAK,SAAAC,GAAI,OAAIA,EAAKpC,SAAWF,EAAME,WAI9CkC,EAAU,GAAD,mBAAKtC,GAAL,CAAaE,YCb1BuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.82083986.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl} target=\"_blank\" rel=\"noopener noreferrer\">IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { request } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [isError, setError] = useState(false);\n\n  const getMovie = () => {\n    request(query)\n      .then((result) => {\n        if (result.Response === 'False') {\n          setError(true);\n\n          return;\n        }\n\n        setMovie({\n          title: result.Title,\n          description: result.Plot,\n          imgUrl: result.Poster,\n          imdbId: result.imdbID,\n          imdbUrl: `https://www.imdb.com/title/${result.imdbID}`,\n        });\n      });\n  };\n\n  const setDefault = () => {\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={\n                classNames('input', { 'is-danger': isError })\n              }\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setError(false);\n              }}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => getMovie(query)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                addMovie(movie);\n                setDefault();\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\n// ! by Class Component\n/* export class FindMovie extends React.PureComponent {\n  state = {\n    query: '',\n    movie: null,\n    isError: false,\n  }\n\n  getMovie(query) {\n    request(query)\n      .then((result) => {\n        // todo Если ничего не пришло по запросу, но ничего не делаем\n        if (result.Response === 'False') {\n          this.setState({\n            isError: true,\n          });\n\n          return;\n        }\n\n        // todo в объект муви присваиваем новые свойста из загруженного фильма\n        // todo - названия свойств отличались\n        this.setState({\n          movie: {\n            title: result.Title,\n            description: result.Plot,\n            imgUrl: result.Poster,\n            imdbId: result.imdbID,\n            imdbUrl: `https://www.imdb.com/title/${result.imdbID}`,\n          },\n        });\n      });\n  }\n\n  setDefault = () => {\n    this.setState({\n      movie: null,\n      query: '',\n    });\n  }\n\n  render() {\n    const { addMovie } = this.props;\n\n    return (\n      <>\n        <form className=\"find-movie\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"movie-title\">\n              Movie title\n            </label>\n\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className={\n                  classNames('input', { 'is-danger': this.state.isError })\n                }\n                value={this.state.query}\n                onChange={(event) => {\n                  this.setState({\n                    query: event.target.value,\n                    isError: false,\n                  });\n                }}\n              />\n            </div>\n\n            {this.state.isError && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                type=\"button\"\n                className=\"button is-light\"\n                onClick={() => {\n                  this.getMovie(this.state.query);\n                }}\n              >\n                Find a movie\n              </button>\n            </div>\n\n            <div className=\"control\">\n              <button\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addMovie(this.state.movie);\n                  this.setDefault();\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          </div>\n        </form>\n\n        {this.state.movie && (\n          <div className=\"container\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...this.state.movie} />\n          </div>\n        )}\n      </>\n    );\n  }\n} */\n\nFindMovie.propTypes = {\n  addMovie: propTypes.func.isRequired,\n};\n","/* eslint-disable */\nconst BASE_URL = 'http://www.omdbapi.com/?apikey=9d04d26f&t=';\n\nexport const request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw `{${response.status}}`\n      }\n      \n      return response.json()\n    });\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (movie) => {\n    if (!movie) {\n      return;\n    }\n\n    if (movies.some(item => item.imdbId === movie.imdbId)) {\n      return;\n    }\n\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n\n// ! by Class Component\n/* export class App extends React.Component {\n  state = {\n    movies: data,\n  };\n\n  setMovies = (movie) => {\n    if (!movie) {\n      return;\n    }\n\n    if (this.state.movies\n      .some(item => item.imdbId === movie.imdbId)) {\n      return;\n    }\n\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie addMovie={this.setMovies} />\n        </div>\n      </div>\n    );\n  }\n} */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}